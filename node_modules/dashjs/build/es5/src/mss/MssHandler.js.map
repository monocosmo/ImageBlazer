{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":["MssHandler","config","context","eventBus","events","constants","initSegmentType","dashMetrics","playbackController","streamController","protectionController","mssFragmentProcessor","create","ISOBoxer","debug","errHandler","mssParser","fragmentInfoControllers","instance","setup","getStreamProcessor","type","getActiveStreamProcessors","filter","processor","getType","getFragmentInfoController","controller","createDataChunk","request","streamId","endFragment","chunk","DataChunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","startFragmentInfoControllers","processors","forEach","VIDEO","AUDIO","FRAGMENTED_TEXT","fragmentInfoController","streamProcessor","baseURLController","initialize","push","stopFragmentInfoControllers","c","reset","onInitializationRequested","e","mediaType","representationController","getRepresentationController","representation","getCurrentRepresentation","getMediaInfo","FragmentRequest","adaptation","range","id","streamInfo","FRAGMENT_LOADING_PROGRESS","bytes","generateMoov","trigger","INIT_FRAGMENT_LOADED","error","DashJSError","code","message","data","sender","onSegmentMediaLoaded","processFragment","fragmentInfoLoaded","manifestInfo","isDynamic","DVRWindowSize","Infinity","onPlaybackPaused","getIsDynamic","getTime","onPlaybackSeekAsked","onTTMLPreProcess","ttmlSubtitles","replace","registerEvents","on","INIT_REQUESTED","dashjs","FactoryMaker","getSingletonFactoryByName","getClassName","EVENT_PRIORITY_HIGH","PLAYBACK_PAUSED","PLAYBACK_SEEK_ASKED","FRAGMENT_LOADING_COMPLETED","TTML_TO_PARSE","off","createMssParser","__dashjs_factory_name","factory","getClassFactory","errors","MssErrors","updateClassFactory"],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\nimport MssErrors from './errors/MssErrors';\nimport DashJSError from '../streaming/vo/DashJSError';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let dashMetrics = config.dashMetrics;\n    let playbackController = config.playbackController;\n    let streamController = config.streamController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        dashMetrics: dashMetrics,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        streamController: streamController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        debug: config.debug,\n        errHandler: config.errHandler\n    });\n    let mssParser,\n        fragmentInfoControllers,\n        instance;\n\n    function setup() {\n        fragmentInfoControllers = [];\n    }\n\n    function getStreamProcessor(type) {\n        return streamController.getActiveStreamProcessors().filter(processor => {\n            return processor.getType() === type;\n        })[0];\n    }\n\n    function getFragmentInfoController(type) {\n        return fragmentInfoControllers.filter(controller => {\n            return (controller.getType() === type);\n        })[0];\n    }\n\n    function createDataChunk(request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function startFragmentInfoControllers() {\n\n        // Create MssFragmentInfoControllers for each StreamProcessor of active stream (only for audio, video or fragmentedText)\n        let processors = streamController.getActiveStreamProcessors();\n        processors.forEach(function (processor) {\n            if (processor.getType() === constants.VIDEO ||\n                processor.getType() === constants.AUDIO ||\n                processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                let fragmentInfoController = getFragmentInfoController(processor.getType());\n                if (!fragmentInfoController) {\n                    fragmentInfoController = MssFragmentInfoController(context).create({\n                        streamProcessor: processor,\n                        baseURLController: config.baseURLController,\n                        debug: config.debug\n                    });\n                    fragmentInfoController.initialize();\n                    fragmentInfoControllers.push(fragmentInfoController);\n                }\n                fragmentInfoController.start();\n            }\n        });\n    }\n\n    function stopFragmentInfoControllers() {\n        fragmentInfoControllers.forEach(c => {\n            c.reset();\n        });\n        fragmentInfoControllers = [];\n    }\n\n    function onInitializationRequested(e) {\n        let streamProcessor = getStreamProcessor(e.mediaType);\n        if (!streamProcessor) return;\n\n        // Create init segment request\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let mediaInfo = streamProcessor.getMediaInfo();\n\n        let request = new FragmentRequest();\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        request.quality = representation.index;\n        request.mediaInfo = mediaInfo;\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, mediaInfo.streamInfo.id, e.type !== events.FRAGMENT_LOADING_PROGRESS);\n\n        try {\n            // Generate init segment (moov)\n            chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n\n            // Notify init segment has been loaded\n            eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n                chunk: chunk\n            });\n        } catch (e) {\n            config.errHandler.error(new DashJSError(e.code, e.message, e.data));\n        }\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function onSegmentMediaLoaded(e) {\n        if (e.error)  return;\n\n        let streamProcessor = getStreamProcessor(e.request.mediaType);\n        if (!streamProcessor) return;\n\n        // Process moof to transcode it from MSS to DASH (or to update segment timeline for SegmentInfo fragments)\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n\n        if (e.request.type === 'FragmentInfoSegment') {\n            // If FragmentInfo loaded, then notify corresponding MssFragmentInfoController\n            let fragmentInfoController = getFragmentInfoController(e.request.mediaType);\n            if (fragmentInfoController) {\n                fragmentInfoController.fragmentInfoLoaded(e);\n            }\n        }\n\n        // Start MssFragmentInfoControllers in case of start-over streams\n        let manifestInfo = e.request.mediaInfo.streamInfo.manifestInfo;\n        if (!manifestInfo.isDynamic && manifestInfo.DVRWindowSize !== Infinity) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackPaused() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n            startFragmentInfoControllers();\n        }\n    }\n\n    function onTTMLPreProcess(ttmlSubtitles) {\n        if (!ttmlSubtitles || !ttmlSubtitles.data) {\n            return;\n        }\n\n        ttmlSubtitles.data = ttmlSubtitles.data.replace(/http:\\/\\/www.w3.org\\/2006\\/10\\/ttaf1/gi, 'http://www.w3.org/ns/ttml');\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_PAUSED, onPlaybackPaused, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.TTML_TO_PARSE, onTTMLPreProcess, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n        eventBus.off(events.TTML_TO_PARSE, onTTMLPreProcess, this);\n\n        // Reset FragmentInfoControllers\n        stopFragmentInfoControllers();\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nconst factory = dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\nfactory.errors = MssErrors;\ndashjs.FactoryMaker.updateClassFactory(MssHandler.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory; /* jshint ignore:line */\n"]}