{"version":3,"sources":["../../../../../src/streaming/text/TextBufferController.js"],"names":["TextBufferController","config","context","_BufferControllerImpl","instance","setup","type","Constants","FRAGMENTED_TEXT","create","streamId","dashMetrics","mediaPlayerModel","manifestModel","fragmentModel","errHandler","streamController","mediaController","adapter","textController","abrController","playbackController","streamProcessor","settings","mimeType","getBufferControllerType","initialize","source","StreamProcessor","createBuffer","mediaInfo","getType","getBuffer","setBuffer","value","getMediaSource","setMediaSource","getStreamProcessor","setSeekStartTime","getBufferLevel","reset","errored","getIsBufferingCompleted","switchInitData","representationId","getIsPruningInProgress","dischargePreBuffer","getRangeAt","time","updateTimestampOffset","MSETimeOffset","buffer","timestampOffset","isNaN","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"TextBufferController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport BufferController from './../controllers/BufferController';\nimport NotFragmentedTextBufferController from './NotFragmentedTextBufferController';\n\nfunction TextBufferController(config) {\n\n    config = config || {};\n    let context = this.context;\n\n    let _BufferControllerImpl,\n        instance;\n\n    function setup() {\n\n        // according to text type, we create corresponding buffer controller\n        if (config.type === Constants.FRAGMENTED_TEXT) {\n\n            // in this case, internal buffer ocntroller is a classical BufferController object\n            _BufferControllerImpl = BufferController(context).create({\n                streamId: config.streamId,\n                type: config.type,\n                dashMetrics: config.dashMetrics,\n                mediaPlayerModel: config.mediaPlayerModel,\n                manifestModel: config.manifestModel,\n                fragmentModel: config.fragmentModel,\n                errHandler: config.errHandler,\n                streamController: config.streamController,\n                mediaController: config.mediaController,\n                adapter: config.adapter,\n                textController: config.textController,\n                abrController: config.abrController,\n                playbackController: config.playbackController,\n                streamProcessor: config.streamProcessor,\n                settings: config.settings\n            });\n        } else {\n\n            // in this case, internal buffer controller is a not fragmented text controller object\n            _BufferControllerImpl = NotFragmentedTextBufferController(context).create({\n                streamId: config.streamId,\n                type: config.type,\n                mimeType: config.mimeType,\n                errHandler: config.errHandler,\n                streamProcessor: config.streamProcessor\n            });\n        }\n    }\n\n    function getBufferControllerType() {\n        return _BufferControllerImpl.getBufferControllerType();\n    }\n\n    function initialize(source, StreamProcessor) {\n        return _BufferControllerImpl.initialize(source, StreamProcessor);\n    }\n\n    /**\n     * @param {MediaInfo }mediaInfo\n     * @returns {Object} SourceBuffer object\n     * @memberof BufferController#\n     */\n    function createBuffer(mediaInfo) {\n        return _BufferControllerImpl.createBuffer(mediaInfo);\n    }\n\n    function getType() {\n        return _BufferControllerImpl.getType();\n    }\n\n    function getBuffer() {\n        return _BufferControllerImpl.getBuffer();\n    }\n\n    function setBuffer(value) {\n        _BufferControllerImpl.setBuffer(value);\n    }\n\n    function getMediaSource() {\n        return _BufferControllerImpl.getMediaSource();\n    }\n\n    function setMediaSource(value) {\n        _BufferControllerImpl.setMediaSource(value);\n    }\n\n    function getStreamProcessor() {\n        _BufferControllerImpl.getStreamProcessor();\n    }\n\n    function setSeekStartTime(value) {\n        _BufferControllerImpl.setSeekStartTime(value);\n    }\n\n    function getBufferLevel() {\n        return _BufferControllerImpl.getBufferLevel();\n    }\n\n    function reset(errored) {\n        _BufferControllerImpl.reset(errored);\n    }\n\n    function getIsBufferingCompleted() {\n        return _BufferControllerImpl.getIsBufferingCompleted();\n    }\n\n    function switchInitData(streamId, representationId) {\n        _BufferControllerImpl.switchInitData(streamId, representationId);\n    }\n\n    function getIsPruningInProgress() {\n        return _BufferControllerImpl.getIsPruningInProgress();\n    }\n\n    function dischargePreBuffer() {\n        return _BufferControllerImpl.dischargePreBuffer();\n    }\n\n    function getRangeAt(time) {\n        return _BufferControllerImpl.getRangeAt(time);\n    }\n\n    function updateTimestampOffset(MSETimeOffset) {\n        const buffer = getBuffer();\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\n            buffer.timestampOffset = MSETimeOffset;\n        }\n    }\n\n    instance = {\n        getBufferControllerType: getBufferControllerType,\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        getStreamProcessor: getStreamProcessor,\n        setSeekStartTime: setSeekStartTime,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        getBufferLevel: getBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        getIsPruningInProgress: getIsPruningInProgress,\n        dischargePreBuffer: dischargePreBuffer,\n        switchInitData: switchInitData,\n        getRangeAt: getRangeAt,\n        reset: reset,\n        updateTimestampOffset: updateTimestampOffset\n    };\n\n    setup();\n\n    return instance;\n}\n\nTextBufferController.__dashjs_factory_name = 'TextBufferController';\nexport default FactoryMaker.getClassFactory(TextBufferController);\n"]}