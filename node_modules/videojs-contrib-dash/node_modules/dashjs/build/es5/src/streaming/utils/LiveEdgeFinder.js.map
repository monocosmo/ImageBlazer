{"version":3,"sources":["../../../../../src/streaming/utils/LiveEdgeFinder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LA8ByB,yBAAyB,mGAC5B,wBAAwB;;;;GAO9C,SAAS,cAAc,CAAC,MAAM,CAAE,CAE5B,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,QAAQ,UAAA,CAAC,AACb,IAAI,iBAAiB,CAAG,MAAM,CAAC,iBAAiB,CAAC,AACjD,IAAI,eAAe,CAAG,MAAM,CAAC,eAAe,CAAC,AAE7C,SAAS,WAAW,EAAG,CACnB,GAAI,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAE,CAChK,MAAM,IAAI,KAAK,CAAC,gCAAU,oBAAoB,CAAC,CAAC,CACnD,CACJ,AAED,SAAS,WAAW,EAAG,CACnB,WAAW,EAAE,CAAC,AACd,IAAM,kBAAkB,CAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC,AACnE,IAAM,MAAM,CAAG,kBAAkB,CAAC,SAAS,CAAG,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAG,CAAC,CAAC,AACnF,IAAI,QAAQ,CAAG,MAAM,CAAC,AACtB,GAAI,kBAAkB,CAAC,yBAAyB,CAAE,CAC9C,QAAQ,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,AACnD,iBAAiB,CAAC,mBAAmB,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAC5D,AACD,OAAO,QAAQ,CAAC,CACnB,AAED,SAAS,KAAK,EAAG,CACb,iBAAiB,GAAG,IAAI,CAAC,AACzB,eAAe,GAAG,IAAI,CAAC,CAC1B,AAED,QAAQ,GAAG,CACP,WAAW,CAAE,WAAW,CACxB,KAAK,CAAE,KAAK,CACf,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,cAAc,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,qBACzC,8BAAa,eAAe,CAAC,cAAc,CAAC","file":"LiveEdgeFinder.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\n\n/**\n * @param {Object} config\n * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}\n * @constructor\n */\nfunction LiveEdgeFinder(config) {\n\n    config = config || {};\n    let instance;\n    let timelineConverter = config.timelineConverter;\n    let streamProcessor = config.streamProcessor;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge') || !streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationInfo')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getLiveEdge() {\n        checkConfig();\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        const dvrEnd = representationInfo.DVRWindow ? representationInfo.DVRWindow.end : 0;\n        let liveEdge = dvrEnd;\n        if (representationInfo.useCalculatedLiveEdgeTime) {\n            liveEdge = timelineConverter.getExpectedLiveEdge();\n            timelineConverter.setClientTimeOffset(liveEdge - dvrEnd);\n        }\n        return liveEdge;\n    }\n\n    function reset() {\n        timelineConverter = null;\n        streamProcessor = null;\n    }\n\n    instance = {\n        getLiveEdge: getLiveEdge,\n        reset: reset\n    };\n\n    return instance;\n}\n\nLiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';\nexport default FactoryMaker.getClassFactory(LiveEdgeFinder);"]}