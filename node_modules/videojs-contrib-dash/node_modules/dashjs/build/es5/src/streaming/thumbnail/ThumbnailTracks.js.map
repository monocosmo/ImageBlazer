{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":[],"mappings":"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","file":"ThumbnailTracks.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DashConstants from '../../dash/constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\nimport URLUtils from '../../streaming/utils/URLUtils';\nimport {replaceIDForTemplate, getTimeBasedSegment} from '../../dash/utils/SegmentsUtils';\n\nimport SegmentBaseLoader from '../../dash/SegmentBaseLoader';\nimport BoxParser from '../../streaming/utils/BoxParser';\nimport XHRLoader from '../../streaming/net/XHRLoader';\n\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\n\nfunction ThumbnailTracks(config) {\n    const context = this.context;\n\n    const dashManifestModel = config.dashManifestModel;\n    const adapter = config.adapter;\n    const baseURLController = config.baseURLController;\n    const stream = config.stream;\n    const timelineConverter = config.timelineConverter;\n    const metricsModel = config.metricsModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        tracks,\n        currentTrackIndex,\n        loader, segmentBaseLoader, boxParser;\n\n    function initialize() {\n        reset();\n        loader = XHRLoader(context).create({});\n        boxParser = BoxParser(context).getInstance();\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler\n        });\n\n        // parse representation and create tracks\n        addTracks();\n    }\n\n    function normalizeSegments(fragments, representation) {\n        const segments = [];\n        let count = 0;\n\n        let i,\n            len,\n            s,\n            seg;\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            s = fragments[i];\n\n            seg = getTimeBasedSegment(\n                timelineConverter,\n                dashManifestModel.getIsDynamic(),\n                representation,\n                s.startTime,\n                s.duration,\n                s.timescale,\n                s.media,\n                s.mediaRange,\n                count);\n\n            segments.push(seg);\n\n            seg = null;\n            count++;\n        }\n        return segments;\n    }\n\n    function addTracks() {\n        if (!stream || !dashManifestModel || !adapter) {\n            return;\n        }\n\n        const streamInfo = stream.getStreamInfo();\n        if (!streamInfo) {\n            return;\n        }\n\n        // Extract thumbnail tracks\n        const mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\n        if (!mediaInfo) {\n            return;\n        }\n\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\n        if (!voAdaptation) {\n            return;\n        }\n\n        const voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n        if (voReps && voReps.length > 0) {\n            voReps.forEach((rep) => {\n                if (rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)\n                    createTrack(rep);\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE)\n                    createTrack(rep, true);\n            });\n        }\n\n        if (tracks.length > 0) {\n            // Sort bitrates and select the lowest bitrate rendition\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\n            currentTrackIndex = tracks.length - 1;\n        }\n    }\n\n    function createTrack(representation, useSegmentBase) {\n        const track = new ThumbnailTrackInfo();\n        track.id = representation.id;\n        track.bitrate = representation.bandwidth;\n        track.width = representation.width;\n        track.height = representation.height;\n        track.tilesHor = 1;\n        track.tilesVert = 1;\n\n        if (representation.essentialProperties) {\n            representation.essentialProperties.forEach((p) => {\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\n                    const vars = p.value.split('x');\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n                        track.tilesHor = parseInt(vars[0], 10);\n                        track.tilesVert = parseInt(vars[1], 10);\n                    }\n                }\n            });\n        }\n\n        if (useSegmentBase) {\n            segmentBaseLoader.loadSegments(representation, Constants.IMAGE, representation.indexRange, {}, function (segments, representation) {\n                var cache = [];\n                segments = normalizeSegments(segments, representation);\n                track.segmentDuration = segments[0].duration; //assume all segments have the same duration\n                track.readThumbnail = function (time, callback) {\n\n                    let cached = null;\n                    cache.some(el => {\n                        if (el.start <= time && el.end > time) {\n                            cached = el.url;\n                            return true;\n                        }\n                    });\n                    if (cached) {\n                        callback(cached);\n                    } else {\n                        segments.some((ss) => {\n                            if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\n                                const baseURL = baseURLController.resolve(representation.path);\n                                loader.load({\n                                    method: 'get',\n                                    url: baseURL.url,\n                                    request: {\n                                        range: ss.mediaRange,\n                                        responseType: 'arraybuffer'\n                                    },\n                                    onload: function (e) {\n                                        let info = boxParser.getSamplesInfo(e.target.response);\n                                        let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\n                                        let imageUrl = window.URL.createObjectURL( blob );\n                                        cache.push({\n                                            start: ss.mediaStartTime,\n                                            end: ss.mediaStartTime + ss.duration,\n                                            url: imageUrl\n                                        });\n                                        if (callback)\n                                            callback(imageUrl);\n                                    }\n                                });\n                                return true;\n                            }\n                        });\n                    }\n                };\n            });\n        } else {\n            track.startNumber = representation.startNumber;\n            track.segmentDuration = representation.segmentDuration;\n            track.timescale = representation.timescale;\n            track.templateUrl = buildTemplateUrl(representation);\n        }\n\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\n            // Precalculate width and heigth per tile for perf reasons\n            track.widthPerTile = track.width / track.tilesHor;\n            track.heightPerTile = track.height / track.tilesVert;\n            tracks.push(track);\n        }\n    }\n\n    function buildTemplateUrl(representation) {\n        const templateUrl = urlUtils.isRelative(representation.media) ?\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n        if (!templateUrl) {\n            return '';\n        }\n\n        return replaceIDForTemplate(templateUrl, representation.id);\n    }\n\n    function getTracks() {\n        return tracks;\n    }\n\n    function getCurrentTrackIndex() {\n        return currentTrackIndex;\n    }\n\n    function getCurrentTrack() {\n        if (currentTrackIndex < 0) {\n            return null;\n        }\n        return tracks[currentTrackIndex];\n    }\n\n    function setTrackByIndex(index) {\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        // select highest bitrate in case selected index is higher than bitrate list length\n        if (index >= tracks.length) {\n            index = tracks.length - 1;\n        }\n        currentTrackIndex = index;\n    }\n\n    function reset() {\n        tracks = [];\n        currentTrackIndex = -1;\n    }\n\n    instance = {\n        initialize: initialize,\n        getTracks: getTracks,\n        reset: reset,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrack: getCurrentTrack,\n        getCurrentTrackIndex: getCurrentTrackIndex\n    };\n\n    initialize();\n\n    return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\n"]}