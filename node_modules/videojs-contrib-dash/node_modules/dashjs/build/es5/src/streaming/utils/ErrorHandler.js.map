{"version":3,"sources":["../../../../../src/streaming/utils/ErrorHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;0LA8BqB,qBAAqB,yFACvB,0BAA0B,iGACpB,yBAAyB;;GAKlD,SAAS,YAAY,EAAG,CAEpB,IAAI,QAAQ,UAAA,CAAC,AACb,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,QAAQ,CAAG,8BAAS,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;;;;OAO/C,SAAS,eAAe,CAAC,GAAG,CAAE,CAC1B,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,YAAY,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CACrE;;;;;;OASD,SAAS,aAAa,CAAC,EAAE,CAAE,GAAG,CAAE,OAAO,CAAE,CACrC,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,UAAU,CAAE,KAAK,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,GAAG,CAAE,GAAG,CAAE,OAAO,CAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CACpG;;;;;;;OAUD,SAAS,aAAa,CAAC,OAAO,CAAE,EAAE,CAAE,QAAQ,CAAE,GAAG,CAAE,CAC/C,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,eAAe,CAAE,KAAK,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,EAAE,CAAE,EAAE,CAAE,QAAQ,CAAE,QAAQ,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAC/H;;;;;;OASD,SAAS,cAAc,CAAC,OAAO,CAAE,EAAE,CAAE,SAAS,CAAE,CAC5C,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,IAAI,CAAE,KAAK,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CACnG;;;;OAOD,SAAS,gBAAgB,CAAC,GAAG,CAAE,CAC3B,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,aAAa,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CACtE;;;;OAOD,SAAS,oBAAoB,CAAC,GAAG,CAAE,CAC/B,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,aAAa,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CACtE;;;;OAOD,SAAS,oBAAoB,CAAC,GAAG,CAAE,CAC/B,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,aAAa,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CACtE;;;OAMD,SAAS,KAAK,CAAC,GAAG,CAAE,CAChB,QAAQ,CAAC,OAAO,CAAC,8BAAO,KAAK,CAAE,CAAC,KAAK,CAAE,GAAG,CAAC,CAAC,CAAC,CAChD,AAED,QAAQ,GAAG,CACP,eAAe,CAAE,eAAe,CAChC,aAAa,CAAE,aAAa,CAC5B,aAAa,CAAE,aAAa,CAC5B,cAAc,CAAE,cAAc,CAC9B,gBAAgB,CAAE,gBAAgB,CAClC,oBAAoB,CAAE,oBAAoB,CAC1C,oBAAoB,CAAE,oBAAoB,CAC1C,KAAK,CAAE,KAAK,CACf,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,YAAY,CAAC,qBAAqB,GAAG,cAAc,CAAC,qBACrC,8BAAa,mBAAmB,CAAC,YAAY,CAAC","file":"ErrorHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module ErrorHandler\n */\nfunction ErrorHandler() {\n\n    let instance;\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    /**\n     * @param {number} err  \"mediasource\"|\"mediakeys\"\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function capabilityError(err) {\n        eventBus.trigger(Events.ERROR, {error: 'capability', event: err});\n    }\n\n    /**\n     * @param {string} id \"manifest\"|\"SIDX\"|\"content\"|\"initialization\"|\"xlink\"\n     * @param {string} url \"\"\n     * @param {object} request {XMLHttpRequest instance}\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function downloadError(id, url, request) {\n        eventBus.trigger(Events.ERROR, {error: 'download', event: {id: id, url: url, request: request}});\n    }\n\n    /**\n     * @param {string} message \"\"\n     * @param {string} id \"parse\"|\"nostreams\"\n     * @param {obj} manifest {parsed manifest}\n     * @param {obj} err\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function manifestError(message, id, manifest, err) {\n        eventBus.trigger(Events.ERROR, {error: 'manifestError', event: {message: message, id: id, manifest: manifest, event: err}});\n    }\n\n    /**\n     * @param {string} message ''\n     * @param {string} id 'parse'\n     * @param {string} ccContent ''\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function timedTextError(message, id, ccContent) {\n        eventBus.trigger(Events.ERROR, {error: 'cc', event: {message: message, id: id, cc: ccContent}});\n    }\n\n    /**\n     * @param {string} err\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function mediaSourceError(err) {\n        eventBus.trigger(Events.ERROR, {error: 'mediasource', event: err});\n    }\n\n    /**\n     * @param {string} err\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function mediaKeySessionError(err) {\n        eventBus.trigger(Events.ERROR, {error: 'key_session', event: err});\n    }\n\n    /**\n     * @param {string} err\n     * @memberof module:ErrorHandler\n     * @deprecated\n     */\n    function mediaKeyMessageError(err) {\n        eventBus.trigger(Events.ERROR, {error: 'key_message', event: err});\n    }\n\n    /**\n     * @param {object} err DashJSError with code, message and data attributes\n     * @memberof module:ErrorHandler\n     */\n    function error(err) {\n        eventBus.trigger(Events.ERROR, {error: err});\n    }\n\n    instance = {\n        capabilityError: capabilityError,\n        downloadError: downloadError,\n        manifestError: manifestError,\n        timedTextError: timedTextError,\n        mediaSourceError: mediaSourceError,\n        mediaKeySessionError: mediaKeySessionError,\n        mediaKeyMessageError: mediaKeyMessageError,\n        error: error\n    };\n\n    return instance;\n}\n\nErrorHandler.__dashjs_factory_name = 'ErrorHandler';\nexport default FactoryMaker.getSingletonFactory(ErrorHandler);"]}